#! /usr/bin/env python

import sys
import os
import argparse
import logging
import etspecutil
from etspecutil.marker import MarkersFrom3DMarkersFileFactory

logger = logging.getLogger(__name__)

LOG_FORMAT = "%(asctime)-15s %(levelname)s %(name)s %(message)s"


class Parameters(object):
    """Holds command line arguments
    """
    pass


def _setup_logging(theargs):
    """Sets up logging for this application
    """
    theargs.logformat = LOG_FORMAT
    theargs.numericloglevel = logging.NOTSET
    if theargs.loglevel == 'DEBUG':
        theargs.numericloglevel = logging.DEBUG
    if theargs.loglevel == 'INFO':
        theargs.numericloglevel = logging.INFO
    if theargs.loglevel == 'WARNING':
        theargs.numericloglevel = logging.WARNING
    if theargs.loglevel == 'ERROR':
        theargs.numericloglevel = logging.ERROR
    if theargs.loglevel == 'CRITICAL':
        theargs.numericloglevel = logging.CRITICAL

    logger.setLevel(theargs.numericloglevel)
    logging.basicConfig(format=theargs.logformat)
    logging.getLogger('etspecutil.marker').setLevel(theargs.numericloglevel)
    logging.getLogger('etspecutil.util').setLevel(theargs.numericloglevel)


def rotate_markers_file(theargs):
    """Rotates 3DMarkers.txt file
    """
    logger.info('Angle set to ', theargs.angle)
    logger.info('Markerfile set to ', theargs.markerfile)

    if theargs.outfile is None:
        logger.info('No --outfile specified. Using original name ' +
                    theargs.markerfile + ' and appending .orig to original '
                                         'file')
        markerfile = theargs.markerfile + '.orig'
        os.rename(theargs.markerfile, markerfile)
        outfile = theargs.markerfile
    else:
        markerfile = theargs.markerfile
        logging.info('Writing rotated markers to ' + theargs.outfile)
        outfile = theargs.outfile

    fac = MarkersFrom3DMarkersFileFactory(markerfile)

    markers = fac.get_markerslist()

    markers.rotate_by_angle(float(theargs.angle), float(theargs.width) / 2,
                            float(theargs.height) / 2)

    markers.write_markers_to_file(outfile)


def _parse_arguments(desc, args):
    """Parses command line arguments
    """
    pargs = Parameters()
    help_formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=help_formatter)
    parser.add_argument("markerfile",
                        help='3Dmarkers.txt file to rotate')
    parser.add_argument("-a", "--angle", dest='angle', type=float,
                        help='Degree of rotation ie 0, 22.5', default=90)
    parser.add_argument("--outfile", help='Write output to this file, '
                                          'skipping rename')
    parser.add_argument("--width", default=1080, type=int,
                        help='Width of image, aka size in X dimension')
    parser.add_argument("--height", default=1080, type=int,
                        help='Height of image, aka size in Y dimension')
    parser.add_argument("--log", dest="loglevel", default='WARNING',
                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR',
                                 'CRITICAL'],
                        help="Sets the logging level (default WARNING)")
    parser.add_argument('--version', action='version',
                        version=('%(prog)s ' + etspecutil.__version__))

    return parser.parse_args(args, namespace=pargs)


def main():
    desc = """
              Rotates 3Dmarkers.txt file generated by etspec
           """

    theargs = _parse_arguments(desc, sys.argv[1:])
    theargs.program = sys.argv[0]
    theargs.version = etspecutil.__version__
    _setup_logging(theargs)

    rotate_markers_file(theargs)

if __name__ == '__main__':
    main()
